{{- $namespace := printf "%s%s" "user-system-" .Values.bfl.username -}}
{{- $userspacenamespace := printf "%s%s" "user-space-" .Values.bfl.username -}}
{{- $zinc_files_secret := (lookup "v1" "Secret" $namespace "zinc-files-secrets") -}}
{{- $user_service_secret := (lookup "v1" "Secret" $namespace "user-service-secrets") -}}

{{- $password := "" -}}
{{ if $zinc_files_secret -}}
{{ $password = (index $zinc_files_secret "data" "password") }}
{{ else -}}
{{ $password = randAlphaNum 16 | b64enc }}
{{- end -}}

{{- $redis_password := "" -}}
{{ if $zinc_files_secret -}}
{{ $redis_password = (index $zinc_files_secret "data" "redis_password") }}
{{ else -}}
{{ $redis_password = randAlphaNum 16 | b64enc }}
{{- end -}}

{{- $redis_password_data := "" -}}
{{ $redis_password_data = $redis_password | b64dec }}

{{- $pg_password := "" -}}
{{ if $zinc_files_secret -}}
{{ $pg_password = (index $zinc_files_secret "data" "pg_password") }}
{{ else -}}
{{ $pg_password = randAlphaNum 16 | b64enc }}
{{- end -}}

{{- $files_frontend_nats_secret := (lookup "v1" "Secret" $namespace "files-frontend-nats-secrets") -}}
{{- $files_frontend_nats_password := "" -}}
{{ if $files_frontend_nats_secret -}}
{{ $files_frontend_nats_password = (index $files_frontend_nats_secret "data" "files_frontend_nats_password") }}
{{ else -}}
{{ $files_frontend_nats_password = randAlphaNum 16 | b64enc }}
{{- end -}}


{{- $user_service_pg_password := "" -}}
{{ if $user_service_secret -}}
{{ $user_service_pg_password = (index $user_service_secret "data" "pg_password") }}
{{ else -}}
{{ $user_service_pg_password = randAlphaNum 16 | b64enc }}
{{- end -}}


{{- $user_service_redis_password := "" -}}
{{ if $user_service_secret -}}
{{ $user_service_redis_password = (index $user_service_secret "data" "redis_password") }}
{{ else -}}
{{ $user_service_redis_password = randAlphaNum 16 | b64enc }}
{{- end -}}

{{- $user_service_nats_secret := (lookup "v1" "Secret" $userspacenamespace "user-service-nats-secret") -}}
{{- $nats_password := "" -}}
{{ if $user_service_nats_secret -}}
{{ $nats_password = (index $user_service_nats_secret "data" "nats_password") }}
{{ else -}}
{{ $nats_password = randAlphaNum 16 | b64enc }}
{{- end -}}

---

apiVersion: v1
kind: Secret
metadata:
  name: user-service-nats-secret
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  nats_password: {{ $nats_password }}

---
apiVersion: v1
kind: Service
metadata:
  name: dashboard-service
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: olares-app
  type: ClusterIP
  ports:
    - protocol: TCP
      name: dashboard
      port: 80
      targetPort: 81
---
apiVersion: v1
kind: Service
metadata:
  name: control-hub-service
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: olares-app
  type: ClusterIP
  ports:
    - protocol: TCP
      name: control-hub
      port: 80
      targetPort: 82

---
apiVersion: v1
kind: Service
metadata:
  name: profile-service
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  selector:
    app: olares-app
  ports:
    - name: "profile-editor"
      protocol: TCP
      port: 80
      targetPort: 83
    - name: "profile-preview"
      protocol: TCP
      port: 3000
      targetPort: 8090
---
apiVersion: v1
kind: Service
metadata:
  name: headscale-svc
  namespace: user-space-{{ .Values.bfl.username }}
spec:
  selector:
    app: olares-app
  type: ClusterIP
  ports:
    - protocol: TCP
      name: headscale
      port: 80
      targetPort: 85
---
apiVersion: v1
kind: Service
metadata:
  name: settings-service
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: olares-app
  type: ClusterIP
  ports:
    - protocol: TCP
      name: settings
      port: 80
      targetPort: 86
---
apiVersion: v1
kind: Service
metadata:
  name: files-fe-service
  namespace: user-space-{{ .Values.bfl.username }}
spec:
  selector:
    app: olares-app
  type: ClusterIP
  ports:
    - protocol: TCP
      name: files
      port: 80
      targetPort: 88
---
apiVersion: v1
kind: Service
metadata:
  name: vault-service
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  selector:
    app: olares-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 89
---
apiVersion: v1
kind: Service
metadata:
  name: appstore-fe-service
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: olares-app
  type: ClusterIP
  ports:
    - protocol: TCP
      name: appstore
      port: 80
      targetPort: 90
---
apiVersion: v1
kind: Service
metadata:
  name: edge-desktop
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  selector:
    app: olares-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 91
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: olares-app-deployment
  namespace: {{ .Release.Namespace }}
  labels:
    app: olares-app
    applications.app.bytetrade.io/name: olares-app
    applications.app.bytetrade.io/owner: '{{ .Values.bfl.username }}'
    applications.app.bytetrade.io/author: bytetrade.io
  annotations:
    applications.app.bytetrade.io/default-thirdlevel-domains: '[{"appName": "olares-app","entranceName":"dashboard","thirdLevelDomain":"dashboard"},{"appName":"olares-app","entranceName":"control-hub","thirdLevelDomain":"control-hub"},{"appName":"olares-app","entranceName":"files","thirdLevelDomain":"files"},{"appName": "olares-app","entranceName":"vault","thirdLevelDomain":"vault"},{"appName":"olares-app","entranceName":"headscale","thirdLevelDomain":"headscale"},{"appName":"olares-app","entranceName":"settings","thirdLevelDomain":"settings"},{"appName": "olares-app","entranceName":"market","thirdLevelDomain":"market"},{"appName":"olares-app","entranceName":"profile","thirdLevelDomain":"profile"}]'
    applications.app.bytetrade.io/icon: https://file.bttcdn.com/appstore/olaresapps/icon.png
    applications.app.bytetrade.io/title: 'Olares Apps'
    applications.app.bytetrade.io/version: '0.0.1'
    applications.app.bytetrade.io/policies: '{"policies":[{"entranceName":"dashboard","uriRegex":"/js/script.js", "level":"public"},{"entranceName":"dashboard","uriRegex":"/js/api/send", "level":"public"}]}'
    applications.app.bytetrade.io/entrances: '[{"name":"files", "host":"files-fe-service", "port":80,"title":"Files","windowPushState":true,"icon":"https://file.bttcdn.com/appstore/files/icon.png"},{"name":"vault", "host":"vault-service", "port":80,"title":"Vault","windowPushState":true,"icon":"https://file.bttcdn.com/appstore/vault/icon.png"},{"name":"market", "host":"appstore-fe-service", "port":80,"title":"Market","windowPushState":true,"icon":"https://file.bttcdn.com/appstore/appstore/icon.png"},{"name":"settings", "host":"settings-service", "port":80,"title":"Settings","icon":"https://file.bttcdn.com/appstore/settings/icon.png"},{"name":"profile", "host":"profile-service", "port":80,"title":"Profile","windowPushState":true,"icon":"https://file.bttcdn.com/appstore/profile/icon.png"},{"name":"dashboard","host":"dashboard-service","port":80,"title":"Dashboard","windowPushState":true,"icon":"https://file.bttcdn.com/appstore/dashboard/icon.png"},{"name":"control-hub","host":"control-hub-service","port":80,"title":"Control Hub","windowPushState":true,"icon":"https://file.bttcdn.com/appstore/control-hub/icon.png"},{"name":"headscale", "host":"headscale-svc", "port":80,"title":"Headscale","invisible": true,"icon":"https://file.bttcdn.com/appstore/headscale/icon.png"}]'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: olares-app
  template:
    metadata:
      labels:
        app: olares-app
        io.bytetrade.app: "true"
      annotations:
{{ if .Values.telemetry }}
        instrumentation.opentelemetry.io/inject-nodejs: "olares-instrumentation"
        instrumentation.opentelemetry.io/nodejs-container-names: "user-service"    
        instrumentation.opentelemetry.io/inject-nginx: "olares-instrumentation"
        instrumentation.opentelemetry.io/inject-nginx-container-names: "olares-app"
{{ end }}        
    spec:
      priorityClassName: "system-cluster-critical"
      serviceAccountName: system-frontend
      initContainers:
        - args:
            - -it
            - authelia-backend.os-framework:9091,infisical-service:80,system-server.user-system-{{ .Values.bfl.username }}:80,nats.user-system-{{ .Values.bfl.username }}:4222
          image: owncloudci/wait-for:latest
          imagePullPolicy: IfNotPresent
          name: check-auth
        - name: terminus-sidecar-init
          image: openservicemesh/init:v1.2.3
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
            capabilities:
              add:
                - NET_ADMIN
            runAsNonRoot: false
            runAsUser: 0
          command:
            - /bin/sh
            - -c
            - |
              iptables-restore --noflush <<EOF
              # sidecar interception rules
              *nat
              :PROXY_IN_REDIRECT - [0:0]
              :PROXY_INBOUND - [0:0]
              -A PROXY_IN_REDIRECT -p tcp -j REDIRECT --to-port 15003
              -A PROXY_INBOUND -p tcp --dport 15000 -j RETURN
              -A PROXY_INBOUND -p tcp -j PROXY_IN_REDIRECT
              -A PREROUTING -p tcp -j PROXY_INBOUND
              COMMIT
              EOF

          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
        - name: init-files-data
          image: busybox:1.28
          securityContext:
            privileged: true
            runAsNonRoot: false
            runAsUser: 0
          volumeMounts:
            - name: fb-data
              mountPath: /appdata
            - name: uploads-temp
              mountPath: /uploadstemp
          command:
          - sh
          - -c
          - |
            chown -R 1000:1000 /uploadstemp && \
            chown -R 1000:1000 /appdata 
        - name: init-container
          image: 'postgres:16.0-alpine3.18'
          command:
            - sh
            - '-c'
            - >-
              echo -e "Checking for the availability of PostgreSQL Server deployment"; until psql -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDB -c "SELECT 1"; do sleep 1; printf "-"; done; sleep 5; echo -e " >> PostgreSQL DB Server has started";
          env:
            - name: PGHOST
              value: citus-master-svc.user-system-{{ .Values.bfl.username }}
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: cloud_drive_integration_{{ .Values.bfl.username }}
            - name: PGPASSWORD
              value: "{{ $pg_password | b64dec }}"
            - name: PGDB
              value: user_space_{{ .Values.bfl.username }}_cloud_drive_integration
        - name: olares-app-init
          image: beclab/system-frontend:v1.4.23
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - |
              cp -r /apps/* /www/
          volumeMounts:
            - mountPath: /www
              name: www-dir
       
      containers:
        - name: terminus-envoy-sidecar
          image: bytetrade/envoy:v1.25.11
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 1000
          ports:
            - name: proxy-admin
              containerPort: 15000
            - name: proxy-inbound
              containerPort: 15003
            - name: tapr
              containerPort: 15080
          volumeMounts:
            - name: terminus-sidecar-config
              readOnly: true
              mountPath: /etc/envoy/envoy.yaml
              subPath: envoy.yaml
          command:
            - /usr/local/bin/envoy
            - --log-level
            - debug
            - -c
            - /etc/envoy/envoy.yaml
        - name: olares-app
          image: beclab/docker-nginx-headers-more:ubuntu-v0.1.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 81
            - containerPort: 82
            - containerPort: 83
            - containerPort: 85
            - containerPort: 86
            - containerPort: 88
            - containerPort: 89
            - containerPort: 90
            - containerPort: 91
            - containerPort: 8090
          command:
            - /bin/sh
            - -c
            - |
              rm /etc/nginx/conf.d/default.conf
              cp -r /www/nginxs/* /etc/nginx/conf.d/
              nginx -g 'daemon off;'
          volumeMounts:
            - name: terminus-sidecar-config
              readOnly: true
              mountPath: /etc/envoy/envoy.yaml
              subPath: envoy.yaml
            - name: www-dir
              mountPath: /www
            - name: wise-download-dir
              mountPath: /data/Home
            - name: olares-app-nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: olares-app-nginx-config
              mountPath: /etc/nginx/conf.d/headscale.conf
              subPath: headscale.conf
          env:
            - name: POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NATS_HOST
              value: nats.user-system-{{ .Values.bfl.username }}
            - name: NATS_PORT
              value: '4222'
            - name: NATS_USERNAME
              value: user-system-{{ .Values.bfl.username }}-files-frontend
            - name: NATS_PASSWORD
              value: {{ $files_frontend_nats_password | b64dec }}
            - name: NATS_SUBJECT
              value: os.files-notify
            - name: apiServerURL
              value: http://bfl.{{ .Release.Namespace }}:8080
            - name: NATS_USERNAME_USERSERVICE
              value: user-service-{{ .Values.bfl.username }}
            - name: NATS_PASSWORD_USERSESRVICE
              valueFrom:
                secretKeyRef:
                  key: nats_password
                  name: user-service-nats-secret
            - name: NATS_SUBJECT_MARKET
              value: os.market.{{ .Values.bfl.username}}
            - name: NATS_SUBJECT_APPLICATION
              value: os.application.{{ .Values.bfl.username}}
            - name: NATS_SUBJECT_USER_NOTIFICATION
              value: os.notification.{{ .Values.bfl.username}}
            - name: NATS_SUBJECT_FILES
              value: os.files.{{ .Values.bfl.username}}
            - name: NATS_SUBJECT_KNOWLEDGE
              value: os.knowledge.{{ .Values.bfl.username}}
            - name: NATS_SUBJECT_VAULT
              value: os.vault.{{ .Values.bfl.username}}
        - name: user-service
          image: beclab/user-service:v0.0.50
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
          env:
        {{- range $key, $val := .Values.terminusGlobalEnvs }}
            - name: {{ $key }}
              value: {{ $val | quote }}
        {{- end }}
            - name: DEV_MODE
              value: ''
            - name: MY_NAME
              value: '{{ .Values.bfl.username }}'
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: TERMINUSD_HOST
              value: $(NODE_IP):18088
            - name: APP_SERVICE_SERVICE_HOST
              value: app-service.user-system-{{ .Values.bfl.username }}
            - name: APP_SERVICE_SERVICE_PORT
              value: '28080'
            - name: APP_SERVICE_CHAIN_ID
              value: '10'
            - name: APP_SERVICE_VERIFYING_CONTRACT
              value: '0xe2eaba0979277a90511f8873ae1e8ca26b54e740'
            - name: APP_SERVICE_CLOUD_URL
              value: 'https://cloud-api.bttcdn.com'
            # value: none / nvidia / nvshare / virtaitech
            - name: GPU
              value: {{ .Values.gpu }}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: pg_password
                  name: user-service-secrets
            - name: DATABASE_URL
              value: postgres://user_service_{{ .Values.bfl.username }}:$(DATABASE_PASSWORD)@citus-master-svc.user-system-{{ .Values.bfl.username }}/user_space_{{ .Values.bfl.username }}_user_service?sslmode=disable
            - name: NATS_HOST
              value: nats.user-system-{{ .Values.bfl.username }}
            - name: NATS_PORT
              value: '4222'
            - name: NATS_USERNAME_USERSERVICE
              value: user-service-{{ .Values.bfl.username }}
            - name: NATS_PASSWORD_USERSESRVICE
              valueFrom:
                secretKeyRef:
                  key: nats_password
                  name: user-service-nats-secret
            - name: NATS_SUBJECT_MARKET
              value: os.market.{{ .Values.bfl.username}}
            - name: NATS_SUBJECT_APPLICATION
              value: os.application.{{ .Values.bfl.username}}
            - name: NATS_SUBJECT_USER_NOTIFICATION
              value: os.notification.{{ .Values.bfl.username}}
            - name: NATS_SUBJECT_FILES
              value: os.files.{{ .Values.bfl.username}}
            - name: NATS_SUBJECT_KNOWLEDGE
              value: os.knowledge.{{ .Values.bfl.username}}
            - name: NATS_SUBJECT_VAULT
              value: os.vault.{{ .Values.bfl.username}}
            - name: NATS_SUBJECT_BACKUP
              value: os.backup.{{ .Values.bfl.username}}
            - name: NATS_SUBJECT_INTENT
              value: os.intent.{{ .Values.bfl.username}}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: redis_password
                  name: user-service-secrets
            - name: REDIS_HOST
              value: redis-cluster-proxy.user-system-{{ .Values.bfl.username }}
            - name: REDIS_PORT
              value: '6379'
              
        - name: drive-server
          image: beclab/drive:v0.0.72
          imagePullPolicy: IfNotPresent
          env:
            - name: OS_SYSTEM_SERVER
              value: system-server.user-system-{{ .Values.bfl.username }}
            - name: DATABASE_URL
              value: postgres://cloud_drive_integration_{{ .Values.bfl.username }}:{{ $pg_password | b64dec }}@citus-master-svc.user-system-{{ .Values.bfl.username }}:5432/user_space_{{ .Values.bfl.username }}_cloud_drive_integration
            - name: REDIS_URL
              value: redis://:{{ $redis_password | b64dec }}@redis-cluster-proxy.user-system-{{ .Values.bfl.username }}:6379/0
            - name: TASK_EXECUTOR_MAX_THREADS
              value: '6'
          ports: 
            - containerPort: 8181
          volumeMounts:
            - name: upload-data
              mountPath: /data/Home
            - name: upload-appdata
              mountPath: /appdata/
            - name: userspace-app-dir
              mountPath: /data/Application
            - name: data-dir
              mountPath: /data

        - name: task-executor
          image: beclab/driveexecutor:v0.0.72
          imagePullPolicy: IfNotPresent
          env:
            - name: OS_SYSTEM_SERVER
              value: system-server.user-system-{{ .Values.bfl.username }}
            - name: DATABASE_URL
              value: postgres://cloud_drive_integration_{{ .Values.bfl.username }}:{{ $pg_password | b64dec }}@citus-master-svc.user-system-{{ .Values.bfl.username }}:5432/user_space_{{ .Values.bfl.username }}_cloud_drive_integration
            - name: REDIS_URL
              value: redis://:{{ $redis_password | b64dec }}@redis-cluster-proxy.user-system-{{ .Values.bfl.username }}:6379/0
            - name: TASK_EXECUTOR_MAX_THREADS
              value: '6'
          ports: 
            - containerPort: 8181
          volumeMounts:
            - name: upload-data
              mountPath: /data/Home
            - name: upload-appdata
              mountPath: /appdata/
            - name: userspace-app-dir
              mountPath: /data/Application
            - name: data-dir
              mountPath: /data
      volumes:
        - name: userspace-dir
          hostPath:
            type: Directory
            path: '{{ .Values.userspace.userData }}'
        - name: terminus-sidecar-config
          configMap:
            name: user-service-sidecar-ws-configs
            items:
              - key: envoy.yaml
                path: envoy.yaml
        - name: www-dir
          emptyDir: {}
        - name: wise-download-dir
          hostPath:
            type: Directory
            path: '{{ .Values.userspace.userData }}'
        
        - name: uploads-temp
          hostPath:
            type: DirectoryOrCreate
            path: '{{ .Values.userspace.appCache }}/files/uploadstemp'
        - name: data-dir
          hostPath:
            type: Directory
            path: '{{ .Values.rootPath }}/rootfs/userspace'
        - name: userspace-app-dir
          hostPath:
            type: Directory
            path: '{{ .Values.userspace.appData }}'
        - name: fb-data
          hostPath:
            type: DirectoryOrCreate
            path: '{{ .Values.userspace.appCache}}/files'
        - name: upload-data
          hostPath:
            type: Directory
            path: '{{ .Values.userspace.userData }}'
        - name: upload-appdata
          hostPath:
            type: Directory
            path: '{{ .Values.userspace.appCache}}'
        - name: olares-app-nginx-config
          configMap:
            name: olares-app-nginx-config
            items:
              - key: nginx.conf
                path: nginx.conf
              - key: headscale.conf
                path: headscale.conf

---
apiVersion: v1
kind: Secret
metadata:
  name: cloud-drive-integration-secrets
  namespace: user-system-{{ .Values.bfl.username }}
type: Opaque
data:
  pg_password: {{ $pg_password }}
---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: cloud-drive-integration-pg
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: cloud-drive-integration
  appNamespace: {{ .Release.Namespace }}
  middleware: postgres
  postgreSQL:
    user: cloud_drive_integration_{{ .Values.bfl.username }}
    password:
      valueFrom:
        secretKeyRef:
          key: pg_password
          name: cloud-drive-integration-secrets
    databases:
    - name: cloud-drive-integration
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloud-drive-integration-secrets-auth
  namespace: {{ .Release.Namespace }}
data:
  redis_password: {{ $redis_password_data }}
  redis_addr: redis-cluster-proxy.user-system-{{ .Values.bfl.username }}:6379
  redis_host: redis-cluster-proxy.user-system-{{ .Values.bfl.username }}
  redis_port: '6379'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloud-drive-integration-userspace-data
  namespace: {{ .Release.Namespace }}
data:
  appData: "{{ .Values.userspace.appData }}"
  appCache: "{{ .Values.userspace.appCache }}"
  username: "{{ .Values.bfl.username }}"

---
apiVersion: v1
kind: Secret
metadata:
  name: zinc-files-secrets
  namespace: user-system-{{ .Values.bfl.username }}
type: Opaque
data:
  password: {{ $password }}
  redis_password: {{ $redis_password }}
  pg_password: {{ $pg_password }}
---
apiVersion: v1
kind: Secret
metadata:
  name: files-frontend-nats-secrets
  namespace: user-system-{{ .Values.bfl.username }}
data:
  files_frontend_nats_password: {{ $files_frontend_nats_password }}
type: Opaque
---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: zinc-files-redis
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: files
  appNamespace: user-space-{{ .Values.bfl.username }}
  middleware: redis
  redis:
    password:
      valueFrom:
        secretKeyRef:
          key: redis_password
          name: zinc-files-secrets
    namespace: zinc-files
---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: files-frontend-nat
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: files-frontend
  appNamespace: os
  middleware: nats
  nats:
    password:
      valueFrom:
        secretKeyRef:
          key: files_frontend_nats_password
          name: files-frontend-nats-secrets
    subjects:
      - name: files-notify
        permission:
          pub: allow
          sub: allow
      - name: files.{{ .Values.bfl.username }}
        permission:
          sub: allow
          pub: allow
    user: user-system-{{ .Values.bfl.username }}-files-frontend
---
apiVersion: v1
data:
  envoy.yaml: |
    admin:
      access_log_path: "/dev/stdout"
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 15000
    static_resources:
      listeners:
        - name: listener_0
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 15003
          listener_filters:
            - name: envoy.filters.listener.original_dst
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    stat_prefix: desktop_http
                    upgrade_configs:
                      - upgrade_type: websocket
                      - upgrade_type: tailscale-control-protocol
                    skip_xff_append: false
                    max_request_headers_kb: 500
                    codec_type: AUTO
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: service
                          domains: ["*"]
                          routes:
                            - match:
                                prefix: "/upload"
                              route:
                                cluster: upload_original_dst
                                timeout: 1800s
                                idle_timeout: 1800s
                            - match:
                                prefix: "/"
                              route:
                                cluster: original_dst
                                timeout: 1800s
                                idle_timeout: 1800s
                    http_protocol_options:
                      accept_http_10: true
                    http_filters:
                      - name: envoy.filters.http.ext_authz
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                          http_service:
                            path_prefix: '/api/verify/'
                            server_uri:
                              uri: authelia-backend.os-framework:9091
                              cluster: authelia
                              timeout: 2s
                            authorization_request:
                              allowed_headers:
                                patterns:
                                  - exact: accept
                                  - exact: cookie
                                  - exact: proxy-authorization
                                  - prefix: x-unauth-
                                  - exact: x-authorization
                                  - exact: x-bfl-user
                                  - exact: x-real-ip
                                  - exact: terminus-nonce
                                  - exact: x-provider-proxy
                              headers_to_add:
                                - key: X-Forwarded-Method
                                  value: '%REQ(:METHOD)%'
                                - key: X-Forwarded-Proto
                                  value: '%REQ(:SCHEME)%'
                                - key: X-Forwarded-Host
                                  value: '%REQ(:AUTHORITY)%'
                                - key: X-Forwarded-Uri
                                  value: '%REQ(:PATH)%'
                                - key: X-Forwarded-For
                                  value: '%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%'
                            authorization_response:
                              allowed_upstream_headers:
                                patterns:
                                  - exact: authorization
                                  - exact: proxy-authorization
                                  - prefix: remote-
                                  - prefix: authelia-
                              allowed_client_headers:
                                patterns:
                                  - exact: set-cookie
                              allowed_client_headers_on_success:
                                patterns:
                                  - exact: set-cookie
                          failure_mode_allow: false
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

        - name: listener_image
          address:
            socket_address:
              address: 127.0.0.1
              port_value: 15080
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    stat_prefix: tapr_http
                    http_protocol_options:
                      accept_http_10: true
                    upgrade_configs:
                      - upgrade_type: websocket
                    skip_xff_append: false
                    codec_type: AUTO
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: service
                          domains: ["*"]
                          routes:
                            - match:
                                prefix: "/images/upload"
                              route:
                                cluster: images
                    http_filters:
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router


      clusters:
        - name: original_dst
          connect_timeout: 120s
          type: ORIGINAL_DST
          lb_policy: CLUSTER_PROVIDED
          common_http_protocol_options:
            idle_timeout: 10s
        - name: upload_original_dst
          connect_timeout: 5000s
          type: LOGICAL_DNS
          dns_lookup_family: V4_ONLY
          dns_refresh_rate: 600s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: upload_original_dst
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: files-service.os-framework
                          port_value: 80
        - name: authelia
          connect_timeout: 2s
          type: LOGICAL_DNS
          dns_lookup_family: V4_ONLY
          dns_refresh_rate: 600s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: authelia
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: authelia-backend.os-framework
                          port_value: 9091
        - name: images
          connect_timeout: 5s
          type: LOGICAL_DNS
          dns_lookup_family: V4_ONLY
          dns_refresh_rate: 600s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: images
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: tapr-images-svc.user-system-{{ .Values.bfl.username }}
                          port_value: 8080
kind: ConfigMap
metadata:
  name: sidecar-upload-configs
  namespace: {{ .Release.Namespace }}
  
---
apiVersion: v1
kind: Secret
metadata:
  name: user-service-secrets
  namespace: user-system-{{ .Values.bfl.username }}
type: Opaque
data:
  pg_password: {{ $user_service_pg_password }}
  redis_password: {{ $user_service_redis_password }}
---
apiVersion: v1
kind: Secret
metadata:
  name: user-service-secrets
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  pg_password: {{ $user_service_pg_password }}
  redis_password: {{ $user_service_redis_password }}
---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: user-service-pg
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: user-service
  appNamespace: user-space-{{ .Values.bfl.username }}
  middleware: postgres
  postgreSQL:
    user: user_service_{{ .Values.bfl.username }}
    password:
      valueFrom:
        secretKeyRef:
          key: pg_password
          name: user-service-secrets
    databases:
    - name: user-service
---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: user-service-redis
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: user-service
  appNamespace: user-space-{{ .Values.bfl.username }}
  middleware: redis
  redis:
    password:
      valueFrom:
        secretKeyRef:
          key: redis_password
          name: user-service-secrets
    namespace: user-service
---
apiVersion: v1
kind: Service
metadata:
  name: vault-server
  namespace: {{ .Release.Namespace }}
spec:
  type: ExternalName
  externalName: vault-server.os-framework.svc.cluster.local
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000

---
apiVersion: v1
data:
  envoy.yaml: |
    admin:
      access_log_path: "/dev/stdout"
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 15000
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 15003
        listener_filters:
          - name: envoy.filters.listener.original_dst
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst
        filter_chains:
          - filters:
              - name: envoy.filters.network.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  stat_prefix: desktop_http
                  upgrade_configs:
                  - upgrade_type: websocket      
                  - upgrade_type: tailscale-control-protocol            
                  skip_xff_append: false
                  max_request_headers_kb: 500
                  codec_type: AUTO
                  route_config:
                    name: local_route
                    virtual_hosts:
                      - name: service
                        domains: ["*"]
                        routes:
                          - match:
                              prefix: "/"
                            route:
                              cluster: original_dst
                              timeout: 180s
                  http_protocol_options:
                    accept_http_10: true
                  http_filters:
                  - name: envoy.filters.http.ext_authz
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                      http_service:
                        path_prefix: '/api/verify/'
                        server_uri:
                          uri: authelia-backend.os-framework:9091
                          cluster: authelia
                          timeout: 2s
                        authorization_request:
                          allowed_headers:
                            patterns:
                              - exact: accept
                              - exact: cookie
                              - exact: proxy-authorization
                              - prefix: x-unauth-
                              - exact: x-authorization
                              - exact: x-bfl-user
                              - exact: x-real-ip
                              - exact: terminus-nonce
                              - exact: x-provider-proxy
                          headers_to_add:
                            - key: X-Forwarded-Method
                              value: '%REQ(:METHOD)%'
                            - key: X-Forwarded-Proto
                              value: '%REQ(:SCHEME)%'
                            - key: X-Forwarded-Host
                              value: '%REQ(:AUTHORITY)%'
                            - key: X-Forwarded-Uri
                              value: '%REQ(:PATH)%'
                            - key: X-Forwarded-For
                              value: '%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%'
                        authorization_response:
                          allowed_upstream_headers:
                            patterns:
                              - exact: authorization
                              - exact: proxy-authorization
                              - prefix: remote-
                              - prefix: authelia-
                          allowed_client_headers:
                            patterns:
                              - exact: set-cookie
                          allowed_client_headers_on_success:
                            patterns:
                              - exact: set-cookie
                      failure_mode_allow: false                      
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

      - name: listener_image
        address:
          socket_address:
            address: 127.0.0.1
            port_value: 15080
        filter_chains:
          - filters:
              - name: envoy.filters.network.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  stat_prefix: tapr_http
                  http_protocol_options:
                    accept_http_10: true
                  upgrade_configs:
                  - upgrade_type: websocket                  
                  skip_xff_append: false
                  codec_type: AUTO
                  route_config:
                    name: local_route
                    virtual_hosts:
                      - name: service
                        domains: ["*"]
                        routes:
                          - match:
                              prefix: "/images/upload"
                            route:
                              cluster: images
                  http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
        
        
      clusters:
      - name: original_dst
        connect_timeout: 120s
        type: ORIGINAL_DST
        lb_policy: CLUSTER_PROVIDED
        common_http_protocol_options:
          idle_timeout: 10s
      - name: authelia
        connect_timeout: 2s
        type: LOGICAL_DNS
        dns_lookup_family: V4_ONLY
        dns_refresh_rate: 600s
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: authelia
          endpoints:
            - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: authelia-backend.os-framework
                        port_value: 9091
      - name: images
        connect_timeout: 5s
        type: LOGICAL_DNS
        dns_lookup_family: V4_ONLY
        dns_refresh_rate: 600s
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: images
          endpoints:
            - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: tapr-images-svc.user-system-{{ .Values.bfl.username }}
                        port_value: 8080
kind: ConfigMap
metadata:
  name: sidecar-configs
  namespace: {{ .Release.Namespace }}

---
apiVersion: v1
data:
  envoy.yaml: |
    admin:
      access_log_path: "/dev/stdout"
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 15000
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 15003
        listener_filters:
          - name: envoy.filters.listener.original_dst
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst
        filter_chains:
          - filters:
              - name: envoy.filters.network.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  stat_prefix: desktop_http
                  upgrade_configs:
                  - upgrade_type: websocket      
                  - upgrade_type: tailscale-control-protocol            
                  skip_xff_append: false
                  max_request_headers_kb: 500
                  codec_type: AUTO
                  route_config:
                    name: local_route
                    virtual_hosts:
                      - name: service
                        domains: ["*"]
                        routes:
                          - match:
                              prefix: "/ws"
                            route:
                              cluster: ws_original_dst
                          - match:
                              prefix: "/"
                            route:
                              cluster: original_dst
                              timeout: 180s
                  http_protocol_options:
                    accept_http_10: true
                  http_filters:
                  - name: envoy.filters.http.ext_authz
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                      http_service:
                        path_prefix: '/api/verify/'
                        server_uri:
                          uri: authelia-backend.os-framework:9091
                          cluster: authelia
                          timeout: 2s
                        authorization_request:
                          allowed_headers:
                            patterns:
                              - exact: accept
                              - exact: cookie
                              - exact: proxy-authorization
                              - prefix: x-unauth-
                              - exact: x-authorization
                              - exact: x-bfl-user
                              - exact: x-real-ip
                              - exact: terminus-nonce
                              - exact: x-provider-proxy
                          headers_to_add:
                            - key: X-Forwarded-Method
                              value: '%REQ(:METHOD)%'
                            - key: X-Forwarded-Proto
                              value: '%REQ(:SCHEME)%'
                            - key: X-Forwarded-Host
                              value: '%REQ(:AUTHORITY)%'
                            - key: X-Forwarded-Uri
                              value: '%REQ(:PATH)%'
                            - key: X-Forwarded-For
                              value: '%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%'
                        authorization_response:
                          allowed_upstream_headers:
                            patterns:
                              - exact: authorization
                              - exact: proxy-authorization
                              - prefix: remote-
                              - prefix: authelia-
                          allowed_client_headers:
                            patterns:
                              - exact: set-cookie
                          allowed_client_headers_on_success:
                            patterns:
                              - exact: set-cookie
                      failure_mode_allow: false                      
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

      - name: listener_image
        address:
          socket_address:
            address: 127.0.0.1
            port_value: 15080
        filter_chains:
          - filters:
              - name: envoy.filters.network.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  stat_prefix: tapr_http
                  http_protocol_options:
                    accept_http_10: true
                  upgrade_configs:
                  - upgrade_type: websocket                  
                  skip_xff_append: false
                  codec_type: AUTO
                  route_config:
                    name: local_route
                    virtual_hosts:
                      - name: service
                        domains: ["*"]
                        routes:
                          - match:
                              prefix: "/images/upload"
                            route:
                              cluster: images
                  http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
        
        
      clusters:
      - name: original_dst
        connect_timeout: 5000s
        type: ORIGINAL_DST
        lb_policy: CLUSTER_PROVIDED
        common_http_protocol_options:
          idle_timeout: 10s
      - name: ws_original_dst
        connect_timeout: 5000s
        type: LOGICAL_DNS
        dns_lookup_family: V4_ONLY
        dns_refresh_rate: 600s
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: ws_original_dst
          endpoints:
            - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: localhost
                        port_value: 40010
      - name: authelia
        connect_timeout: 2s
        type: LOGICAL_DNS
        dns_lookup_family: V4_ONLY
        dns_refresh_rate: 600s
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: authelia
          endpoints:
            - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: authelia-backend.os-framework
                        port_value: 9091
      - name: images
        connect_timeout: 5s
        type: LOGICAL_DNS
        dns_lookup_family: V4_ONLY
        dns_refresh_rate: 600s
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: images
          endpoints:
            - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: tapr-images-svc.user-system-{{ .Values.bfl.username }}
                        port_value: 8080
kind: ConfigMap
metadata:
  name: sidecar-ws-configs
  namespace: {{ .Release.Namespace }}
---
apiVersion: v1
data:
  envoy.yaml: |
    admin:
      access_log_path: "/dev/stdout"
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 15000
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 15003
        listener_filters:
          - name: envoy.filters.listener.original_dst
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst
        filter_chains:
          - filters:
              - name: envoy.filters.network.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  stat_prefix: desktop_http
                  upgrade_configs:
                  - upgrade_type: websocket      
                  - upgrade_type: tailscale-control-protocol            
                  skip_xff_append: false
                  max_request_headers_kb: 500
                  codec_type: AUTO
                  route_config:
                    name: local_route
                    virtual_hosts:
                      - name: service
                        domains: ["*"]
                        routes:
                          - match:
                              prefix: "/ws"
                            route:
                              cluster: ws_original_dst
                          - match:
                              prefix: "/"
                            route:
                              cluster: original_dst
                              timeout: 180s
                  http_protocol_options:
                    accept_http_10: true
                  http_filters:
                  - name: envoy.filters.http.ext_authz
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                      http_service:
                        path_prefix: '/api/verify/'
                        server_uri:
                          uri: authelia-backend.os-framework:9091
                          cluster: authelia
                          timeout: 2s
                        authorization_request:
                          allowed_headers:
                            patterns:
                              - exact: accept
                              - exact: cookie
                              - exact: proxy-authorization
                              - prefix: x-unauth-
                              - exact: x-authorization
                              - exact: x-bfl-user
                              - exact: x-real-ip
                              - exact: terminus-nonce
                              - exact: x-provider-proxy
                          headers_to_add:
                            - key: X-Forwarded-Method
                              value: '%REQ(:METHOD)%'
                            - key: X-Forwarded-Proto
                              value: '%REQ(:SCHEME)%'
                            - key: X-Forwarded-Host
                              value: '%REQ(:AUTHORITY)%'
                            - key: X-Forwarded-Uri
                              value: '%REQ(:PATH)%'
                            - key: X-Forwarded-For
                              value: '%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%'
                        authorization_response:
                          allowed_upstream_headers:
                            patterns:
                              - exact: authorization
                              - exact: proxy-authorization
                              - prefix: remote-
                              - prefix: authelia-
                          allowed_client_headers:
                            patterns:
                              - exact: set-cookie
                          allowed_client_headers_on_success:
                            patterns:
                              - exact: set-cookie
                      failure_mode_allow: false                      
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

      - name: listener_image
        address:
          socket_address:
            address: 127.0.0.1
            port_value: 15080
        filter_chains:
          - filters:
              - name: envoy.filters.network.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  stat_prefix: tapr_http
                  http_protocol_options:
                    accept_http_10: true
                  upgrade_configs:
                  - upgrade_type: websocket                  
                  skip_xff_append: false
                  codec_type: AUTO
                  route_config:
                    name: local_route
                    virtual_hosts:
                      - name: service
                        domains: ["*"]
                        routes:
                          - match:
                              prefix: "/images/upload"
                            route:
                              cluster: images
                  http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
        
        
      clusters:
      - name: original_dst
        connect_timeout: 5000s
        type: ORIGINAL_DST
        lb_policy: CLUSTER_PROVIDED
        common_http_protocol_options:
          idle_timeout: 10s
      - name: ws_original_dst
        connect_timeout: 5000s
        type: LOGICAL_DNS
        dns_lookup_family: V4_ONLY
        dns_refresh_rate: 600s
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: ws_original_dst
          endpoints:
            - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: localhost
                        port_value: 3100
      - name: authelia
        connect_timeout: 2s
        type: LOGICAL_DNS
        dns_lookup_family: V4_ONLY
        dns_refresh_rate: 600s
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: authelia
          endpoints:
            - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: authelia-backend.os-framework
                        port_value: 9091
      - name: images
        connect_timeout: 5s
        type: LOGICAL_DNS
        dns_lookup_family: V4_ONLY
        dns_refresh_rate: 600s
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: images
          endpoints:
            - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: tapr-images-svc.user-system-{{ .Values.bfl.username }}
                        port_value: 8080
kind: ConfigMap
metadata:
  name: user-service-sidecar-ws-configs
  namespace: {{ .Release.Namespace }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: olares-app-nginx-config
  namespace: {{ .Release.Namespace }}
  annotations:
    kubesphere.io/creator: bytetrade.io
data:
  nginx.conf: |-
    user nginx;
    worker_processes 2;
    worker_rlimit_nofile 65535;
    worker_shutdown_timeout 240s;

    error_log   /var/log/nginx/error.log notice;
    pid         /var/run/nginx.pid;

    events {
        multi_accept        on;
        worker_connections 16384;
        use epoll;
    }

    http {
        aio                 threads;
        aio_write           on;
        tcp_nopush          on;
        tcp_nodelay         on;
        log_subrequest      on;
        reset_timedout_connection on;
        keepalive_timeout  75s;
        keepalive_requests 100;
        client_body_temp_path           /tmp/client-body;
        fastcgi_temp_path               /tmp/fastcgi-temp;
        proxy_temp_path                 /tmp/proxy-temp;
        client_max_body_size            1g;
        client_header_buffer_size       1k;
        client_header_timeout           60s;
        large_client_header_buffers     4 8k;
        client_body_buffer_size         8k;
        client_body_timeout             60s;
        types_hash_max_size             2048;
        server_names_hash_max_size      4096;
        server_names_hash_bucket_size   1024;
        map_hash_bucket_size            64;
        proxy_headers_hash_max_size     512;
        proxy_headers_hash_bucket_size  64;
        variables_hash_bucket_size      256;
        variables_hash_max_size         2048;
        underscores_in_headers          off;
        ignore_invalid_headers          on;
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;
        proxy_ssl_session_reuse on;

        sendfile        on;
        resolver_timeout        30s;
        send_timeout            60s;

        map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
        }

        include /etc/nginx/conf.d/*.conf;
    }
  headscale.conf: |-
    server {
        listen 85;
        # Gzip Settings
        gzip on;
        gzip_disable "msie6";
        gzip_min_length 1k;
        gzip_buffers 16 64k;
        gzip_http_version 1.1;
        gzip_comp_level 6;
        gzip_types *;
        index index.html;
        location /ts2021 {
          proxy_pass http://headscale-server-svc:8080;
          proxy_method POST;
          proxy_http_version 1.1;
          proxy_set_header Upgrade 'tailscale-control-protocol';
          proxy_set_header Connection '$connection_upgrade';
          more_set_headers 'Upgrade: $http_upgrade';
        }
        location / {
          proxy_pass http://headscale-server-svc:8080;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection '$connection_upgrade';
        }
    }
---

apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: user-service-nats
  namespace: user-space-{{ .Values.bfl.username }}
spec:
  app: user-service
  appNamespace: os
  middleware: nats
  nats:
    password:
      valueFrom:
        secretKeyRef:
          key: nats_password
          name: user-service-nats-secret
    subjects:
      - name: files.{{ .Values.bfl.username }}
        permission:
          pub: allow
          sub: allow
      - name: notification.{{ .Values.bfl.username }}
        permission:
          pub: allow
          sub: allow
      - name: search.{{ .Values.bfl.username }}
        permission:
          pub: allow
          sub: allow
      - name: seahub.{{ .Values.bfl.username }}
        permission:
          sub: allow
          pub: allow
      - name: vault.{{ .Values.bfl.username }}
        permission:
          sub: allow
          pub: allow
      - name: application.{{ .Values.bfl.username }}
        permission:
          sub: allow
          pub: allow
      - name: knowledge.{{ .Values.bfl.username }}
        permission:
          sub: allow
          pub: allow
      - name: market.{{ .Values.bfl.username }}
        permission:
          sub: allow
          pub: allow
      - name: backup.{{ .Values.bfl.username }}
        permission:
          sub: allow
          pub: allow
      - name: intent.{{ .Values.bfl.username }}
        permission:
          sub: allow
          pub: allow

    user: user-service-{{ .Values.bfl.username }}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: {{ .Release.Namespace }}
  name: system-frontend

