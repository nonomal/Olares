{{- $namespace := printf "%s%s" "user-system-" .Values.bfl.username -}}
{{- $headscale_secret := (lookup "v1" "Secret" $namespace "headscale-secrets") -}}

{{- $pg_password := "" -}}
{{ if $headscale_secret -}}
{{ $pg_password = (index $headscale_secret "data" "pg_password") }}
{{ else -}}
{{ $pg_password = randAlphaNum 16 | b64enc }}
{{- end -}}

{{ $user := (lookup "iam.kubesphere.io/v1alpha2" "User" "" .Values.bfl.username) }}
{{- $role := "" -}}
{{- if $user -}}
{{ $role = (index $user "metadata" "annotations" "bytetrade.io/owner-role") }}
{{- end -}}

---
apiVersion: v1
kind: Secret
metadata:
  name: headscale-secrets
  namespace: user-system-{{ .Values.bfl.username }}
type: Opaque
data:
  pg_password: {{ $pg_password }}

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: headscale-pg
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: headscale
  appNamespace: {{ .Release.Namespace }}
  middleware: postgres
  postgreSQL:
    user: headscale_{{ .Values.bfl.username }}
    password:
      valueFrom:
        secretKeyRef:
          key: pg_password
          name: headscale-secrets
    databases:
    - name: headscale

---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: user-space-{{ .Values.bfl.username }} 
  name: tailscale

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: user-space-{{ .Values.bfl.username }}:admin
subjects:
  - kind: ServiceAccount
    namespace: user-space-{{ .Values.bfl.username }} 
    name: tailscale
roleRef:
  kind: Role
  name: admin
  apiGroup: rbac.authorization.k8s.io


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: headscale
  namespace: user-space-{{ .Values.bfl.username }}
  labels:
    app: headscale
    applications.app.bytetrade.io/author: bytetrade.io
spec:
  replicas: 1
  selector:
    matchLabels:
      app: headscale
  template:
    metadata:
      labels:
        app: headscale
    spec:
      priorityClassName: "system-cluster-critical"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
              - key: node-role.kubernetes.io/control-plane
                operator: Exists
      serviceAccountName: tailscale
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
      - name: init-data
        image: busybox:1.28
        securityContext:
          privileged: true
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
        - name: config
          mountPath: /etc/headscale
        - name: headscale-data
          mountPath: /var/lib/headscale
        - name: config-parent
          mountPath: /headscale
        command:
        - sh
        - -c
        - |
          chown -R 1000:1000 /headscale 
      - name: init
        image: beclab/headscale-init:v0.1.11
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
        env:
        {{- range $key, $val := .Values.terminusGlobalEnvs }}
        - name: {{ $key }}
          value: {{ $val | quote }}
        {{- end }}
        - name: NAMESPACE
          value: bfl.user-space-{{ .Values.bfl.username }}
        - name: PG_HOST
          value: citus-master-svc.user-system-{{ .Values.bfl.username }}
        - name: PG_PORT
          value: "5432"
        - name: PG_USER
          value: headscale_{{ .Values.bfl.username }}
        - name: PG_PASS
          value: "{{ $pg_password | b64dec }}"
        - name: PG_DB
          value: user_space_{{ .Values.bfl.username }}_headscale
        - name: USER_SUBNET
          value: {{ .Values.tailscaleUserSubnet | default "100.64.0.0/20" }}
        volumeMounts:
        - name: config
          mountPath: /etc/headscale
      - name: wait-for-postgres
        image: postgres:16.0-alpine3.18
        command:
          - sh
          - '-c'
          - >-
            echo -e "Checking for the availability of PostgreSQL Server deployment"; until psql -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDB
            -c "SELECT 1"; do sleep 1; printf "-"; done; echo -e " >> PostgreSQL DB Server has started";
        env:
        - name: PGHOST
          value: citus-master-svc.user-system-{{ .Values.bfl.username }}
        - name: PGPORT
          value: "5432"
        - name: PGUSER
          value: headscale_{{ .Values.bfl.username }}
        - name: PGPASSWORD
          value: "{{ $pg_password | b64dec }}"
        - name: PGDB
          value: user_space_{{ .Values.bfl.username }}_headscale
        imagePullPolicy: IfNotPresent
      containers:
      - name: headscale
        image: headscale/headscale:0.22.3
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        env:
        {{- range $key, $val := .Values.terminusGlobalEnvs }}
          - name: {{ $key }}
            value: {{ $val | quote }}
        {{- end }}
        command:
        - headscale
        - serve
        lifecycle:
          postStart:
            exec:
              command:
                - "sh"
                - "-xc"
                - "(date; for i in `seq 1 600`; do if ! test -S /var/run/headscale.sock; then echo wait-headscale.sock-1s; sleep 1; else break; fi; done; headscale apikeys create -e 3650d > /etc/headscale/apikey; headscale users create default; headscale preauthkeys create -e 3650d --reusable -u default > /etc/headscale/preauthkey; if ! test -s /etc/headscale/apikey; then echo apikey-empty; exit 1; fi; if ! test -s /etc/headscale/preauthkey; then echo preauthkey-empty; exit 1; fi) >> /tmp/headscale.log 2>&1"
        volumeMounts:
        - name: config
          mountPath: /etc/headscale
        - name: headscale-data
          mountPath: /var/lib/headscale
        - name: acl-config
          mountPath: /etc/headscale/acl
          readOnly: true
        ports:
        - containerPort: 8080
      - args:
        - APIKEY=$(cat /etc/headscale/apikey) exec /headscale-api-wrapper
        command:
        - /bin/sh
        - -c
        image: beclab/headscale-api-wrapper:v0.1.7
        imagePullPolicy: IfNotPresent
        name: headscale-api-wrapper
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 1000
        volumeMounts:
        - mountPath: /etc/headscale
          name: config
        ports:
        - containerPort: 9000
        - containerPort: 8000
      volumes:
      - name: config
        hostPath:
          type: DirectoryOrCreate
          path: '{{ .Values.userspace.appCache  }}/headscale/config'
      - name: headscale-data
        hostPath:
          type: DirectoryOrCreate
          path: '{{ .Values.userspace.appCache }}/headscale/data'
      - name: config-parent
        hostPath:
          type: DirectoryOrCreate
          path: '{{ .Values.userspace.appCache  }}/headscale'
      - name: acl-config
        configMap:
          defaultMode: 420
          items:
          - key: acl.json
            path: acl.json
          name: tailscale-acl

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tailscale
  namespace: user-space-{{ .Values.bfl.username }}
  labels:
    app: tailscale
    applications.app.bytetrade.io/author: bytetrade.io
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tailscale
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: tailscale
    spec:
      priorityClassName: "system-cluster-critical"
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: headscale
            topologyKey: kubernetes.io/hostname
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: tailscale
        image: tailscale/tailscale:v1.48.1
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
          - >-
            TS_AUTHKEY=$(cat /etc/headscale/preauthkey)
            exec /usr/local/bin/containerboot
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
          privileged: true
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
        - name: config
          mountPath: /etc/headscale
        - name: tailscale-data
          mountPath: /var/lib/tailscale
        env:
        {{- range $key, $val := .Values.terminusGlobalEnvs }}
        - name: {{ $key }}
          value: {{ $val | quote }}
        {{- end }}
        - name: TS_DISABLE_TAILDROP
          value: "true"
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        {{- if eq $role "owner" }}
        - name: TS_DEBUG_FIREWALL_MODE
          value: nftables
        {{- end }}
        - name: TS_SOCKET
          value: "/var/run/tailscale/tailscaled.sock"
        - name: TS_STATE_DIR
          value: "/var/lib/tailscale/"
        - name: USER_INDEX
          value: {{ .Values.tailscaleUserIndex | default "0" | quote }}
        - name: TS_TAILSCALED_EXTRA_ARGS
          value: >-
            --no-logs-no-support
            --verbose=1
            --tun=tailscale0{{ if and .Values.tailscaleUserIndex (ne .Values.tailscaleUserIndex  "0") }}$(USER_INDEX){{ end }}
        - name: TS_ROUTES
          value: $(COREDNS_SVC)/32
        - name: TS_EXTRA_ARGS
          value: >-
            --login-server http://headscale-server-svc:8080
            --netfilter-mode {{ if eq $role "owner" }}on{{ else }}off{{ end }}
        - name: TS_USERSPACE
          value: "false"

        - name: TS_KUBE_SECRET
      volumes:
      - name: config
        hostPath:
          type: DirectoryOrCreate
          path: '{{ .Values.userspace.appCache }}/headscale/config'
      - name: tailscale-data
        hostPath:
          type: DirectoryOrCreate
          path: '{{ .Values.userspace.appCache }}/tailscale/data'

---
apiVersion: v1
kind: Service
metadata:
  name: headscale-server-svc
  namespace: user-space-{{ .Values.bfl.username }}
spec:
  selector:
    app: headscale
  type: ClusterIP
  ports:
    - protocol: TCP
      name: headscale
      port: 8080
      targetPort: 8080
    - protocol: TCP
      name: api
      port: 8000
      targetPort: 8000

---
apiVersion: v1
kind: Service
metadata:
  name: headscale-authkey-svc
  namespace: user-space-{{ .Values.bfl.username }}
spec:
  selector:
    app: headscale
  type: ClusterIP
  ports:
    - protocol: TCP
      name: headscale
      port: 9000
      targetPort: 9000


---

apiVersion: v1
data:
  acl.json: |
    {
      "acls":[
        { "action": "accept", "src": ["*"], "proto": "tcp", "dst": ["*:80"] },
        { "action": "accept", "src": ["*"], "proto": "tcp", "dst": ["*:443"] },
        { "action": "accept", "src": ["*"], "proto": "tcp", "dst": ["*:18088"] },
        { "action": "accept", "src": ["*"], "proto": "udp", "dst": ["*:53"] }
      ],
      "autoApprovers": {
        "routes": {
          "10.0.0.0/8": ["default"],
          "172.16.0.0/12": ["default"],
          "192.168.0.0/16": ["default"]
        },
        "exitNode": []
      }
    }
kind: ConfigMap
metadata:
  name: tailscale-acl
  namespace: user-space-{{ .Values.bfl.username }}
