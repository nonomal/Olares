
{{ $seafile_application_rootpath := printf "%s%s" .Values.rootPath "/rootfs/Application/seafile" }}
{{ $seafile_appcache_rootpath := printf "%s%s" .Values.rootPath "/userdata/Cache/seafile" }}

{{- $namespace := printf "%s" "os-framework" -}}
{{- $seafile_secret := (lookup "v1" "Secret" $namespace "seafile-secrets") -}}
{{- $pg_password := "" -}}
{{ if $seafile_secret -}}
{{ $pg_password = (index $seafile_secret "data" "pg_password") }}
{{ else -}}
{{ $pg_password = randAlphaNum 16 | b64enc }}
{{- end -}}

{{- $seahub_nats_secret := (lookup "v1" "Secret" $namespace "seahub-nats-secrets") -}}
{{- $nats_password := "" -}}
{{ if $seahub_nats_secret -}}
{{ $nats_password = (index $seahub_nats_secret "data" "nats_password") }}
{{ else -}}
{{ $nats_password = randAlphaNum 16 | b64enc }}
{{- end -}}
---
apiVersion: v1
kind: Secret
metadata:
  name: seafile-secrets
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  pg_password: {{ $pg_password }}
  nats_password: {{ $pg_password }}
---
apiVersion: v1
kind: Secret
metadata:
  name: seahub-nats-secrets
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  nats_password: {{ $nats_password }}
---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: seafile-pg
  namespace: {{ .Release.Namespace }}
spec:
  app: seafile
  appNamespace: {{ .Release.Namespace }}
  middleware: postgres
  postgreSQL:
    user: seafile_os_framework
    password:
      valueFrom:
        secretKeyRef:
          key: pg_password
          name: seafile-secrets
    databases:
      - name: ccnet
      - name: seafile
      - name: seahub

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: seafile-nginx-conf
  namespace: {{ .Release.Namespace }}
  annotations:
    kubesphere.io/creator: bytetrade.io
data:
  default.conf: |-
    server {
      listen 80;
      server_name _;
    
      underscores_in_headers on;

      location /published/:/ {
        # access_by_lua_file login.lua;
    
        proxy_pass_request_headers on;
        proxy_pass http://127.0.0.1:8000/;
        include proxy.conf;
      }

      location /assets/bundles {
        # access_by_lua_file login.lua;
    
        proxy_pass_request_headers on;
        proxy_pass http://127.0.0.1:3000;
        include proxy.conf;
      }
    
      location /seafhttp/ {
        # access_by_lua_file login.lua;
    
        proxy_pass_request_headers on;
        proxy_pass http://127.0.0.1:8082/;
        include proxy.conf;
    
        # proxy_set_header Content-Type multipart/form-data;
        # proxy_set_header Content-Length "";
        # proxy_set_body $request_body;
      }
    
      location / {
        # access_by_lua_file login.lua;
    
        proxy_pass_request_headers on;
        proxy_pass http://127.0.0.1:8000;
        include proxy.conf;
      }    
    }
  nginx.conf: |-
    user  nginx;
    worker_processes  4;

    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;


    events {
        worker_connections  1024;
    }


    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  750s;

        #gzip  on;
        client_max_body_size 2000M;
        client_body_buffer_size 2000M;

        include /etc/nginx/conf.d/*.conf;
    }
  proxy.conf: >-
    add_header 'Access-Control-Allow-Headers' 'x-api-nonce,X-api-ts,x-api-ver,X-api-source';
    proxy_set_header Host $http_host;
    proxy_set_header X-real-ip $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme; 
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header Referer $http_referer;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_buffering off;
    proxy_read_timeout 3600s;
    proxy_send_timeout 3600s;
  seafile.conf: |-
    [database]
    type = pgsql
    host = citus-headless.os-platform
    port = 5432
    user = seafile_os_framework
    password = {{ $pg_password | b64dec }}
    db_name = os_framework_seafile
    connection_charset = utf8
    create_tables = true
  ccnet.conf: |-
    [Database]
    ENGINE = pgsql
    HOST = citus-headless.os-platform
    PORT = 5432
    USER = seafile_os_framework
    PASSWD = {{ $pg_password | b64dec }}
    DB = os_framework_ccnet
    CONNECTION_CHARSET = utf8
    CREATE_TABLES = true

    [General]
    SERVICE_URL = /

---
apiVersion: v1
kind: Service
metadata:
  name: seafile
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  ports:
    - name: server
      protocol: TCP
      port: 8082
      targetPort: 8082
    - name: nginx-port
      protocol: TCP
      port: 80
      targetPort: 80

  selector:
    tier: seafile

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: seafile
  namespace: {{ .Release.Namespace }}
  labels:
    app: sync
    applications.app.bytetrade.io/author: bytetrade.io
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      tier: seafile
  template:
    metadata:
      labels:
        tier: seafile
    spec:
      initContainers:
      - name: seahub-init
        image: beclab/seahub-init:v0.0.3
        env:
          - name: DB_HOST
            value: citus-headless.os-platform
          - name: DB_PORT
            value: '5432'
          - name: DB_USER
            value: seafile_os_framework
          - name: DB_PASSWORD
            value: {{ $pg_password | b64dec }}
          - name: DB_NAME1
            value: os_framework_ccnet
          - name: DB_NAME2
            value: os_framework_seafile
          - name: DB_NAME3
            value: os_framework_seahub
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        imagePullPolicy: IfNotPresent

      containers:
      - name: seafile-server
        image: beclab/pg_seafile_server:v0.0.15
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 8082
            protocol: TCP
        env:
          - name: DB_HOST
            value: citus-headless.os-platform
          - name: DB_PORT
            value: '5432'
          - name: DB_NAME1
            value: os_framework_ccnet
          - name: DB_NAME2
            value: os_framework_seafile
          - name: DB_NAME3
            value: os_framework_seahub
          - name: DB_USER
            value: seafile_os_framework
          - name: DB_PASSWORD
            value: {{ $pg_password | b64dec }}
          - name: CCNET_CONF_DIR
            value: /root/dev/conf
          - name: SEAFILE_CONF_DIR
            value: /root/dev/seafile-data
          - name: SEAFILE_CENTRAL_CONF_DIR
            value: /root/dev/conf
          - name: SEAFILE_SERVER_LETSENCRYPT
            value: 'false'
          - name: NATS_HOST
            value: nats.os-platform
          - name: NATS_PORT
            value: "4222"
          - name: NATS_USERNAME
            value: os-seahub-server
          - name: NATS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: nats_password
                name: seahub-nats-secrets
          - name: NATS_SUBJECT_SYSTEM_SEAHUB
            value: os.seahub
          - name: NATS_SUBJECT_SYSTEM_USERS
            value: os.users
          - name: NATS_SUBJECT_SYSTEM_GROUPS
            value: os.groups
        volumeMounts:
          - name: sync-data
            mountPath: /shared
          - name: seafile-data
            mountPath: /root/dev/seafile-data
          - name: seafile-nginx-conf
            mountPath: /root/dev/seafile-data/seafile.conf
            subPath: seafile.conf
          - name: seafile-nginx-conf
            mountPath: /root/dev/conf/ccnet.conf
            subPath: ccnet.conf

      - name: nginx
        image: nginx:stable-alpine3.17-slim
        ports:
          - name: nginx-port
            containerPort: 80
            protocol: TCP
        volumeMounts:
          - name: seafile-nginx-conf
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
          - name: seafile-nginx-conf
            mountPath: /etc/nginx/proxy.conf
            subPath: proxy.conf
          - name: seafile-nginx-conf
            mountPath: /etc/nginx/conf.d/default.conf
            subPath: default.conf
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        imagePullPolicy: IfNotPresent

      volumes:
      - name: seafile-data
        hostPath:
          type: DirectoryOrCreate
          path: '{{ $seafile_application_rootpath }}/data'
      - name: sync-data
        hostPath:
          type: DirectoryOrCreate
          path: '{{ $seafile_application_rootpath }}'
      - name: db-data
        hostPath:
          type: DirectoryOrCreate
          path: '{{ $seafile_appcache_rootpath }}/db'
      - name: seafile-nginx-conf
        configMap:
          name: seafile-nginx-conf
          items:
            - key: nginx.conf
              path: nginx.conf
            - key: proxy.conf
              path: proxy.conf
            - key: default.conf
              path: default.conf
            - key: seafile.conf
              path: seafile.conf
            - key: ccnet.conf
              path: ccnet.conf
          defaultMode: 420

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: SysEventRegistry
metadata:
  name: seafile-user-create-cb
  namespace: {{ .Release.Namespace }}
spec:
  type: subscriber
  event: user.create
  callback: http://files-service.os-framework/callback/create

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: SysEventRegistry
metadata:
  name: seafile-user-delete-cb
  namespace: {{ .Release.Namespace }}
spec:
  type: subscriber
  event: user.delete
  callback: http://files-service.os-framework/callback/delete
---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: seahub-server-nats
  namespace: {{ .Release.Namespace }}
spec:
  app: seahub-server
  appNamespace: os
  middleware: nats
  nats:
    password:
      valueFrom:
        secretKeyRef:
          key: nats_password
          name: seahub-nats-secrets
    subjects:
      - name: "seahub.*"
        permission:
          pub: allow
          sub: allow
      - name: seahub
        permission:
          pub: allow
          sub: allow
      - name: users
        permission:
          pub: allow
          sub: deny
      - name: groups
        permission:
          pub: allow
          sub: deny
    user: os-seahub-server
