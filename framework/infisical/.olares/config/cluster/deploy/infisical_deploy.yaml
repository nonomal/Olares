
{{- $postgres_secret := (lookup "v1" "Secret" .Release.Namespace "infisical-postgres") -}}
{{- $backend_secret := (lookup "v1" "Secret" .Release.Namespace "infisical-backend") -}}
{{- $postgres_password := randAlphaNum 16 | b64enc -}}
{{- $redis_password := randAlphaNum 16 | b64enc -}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
rules:
- apiGroups:
  - "*"
  resources:
  - secrets
  - applicationpermissions
  verbs:
  - get
  - list
metadata:
  name: {{ .Release.Namespace }}:vault-role

---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: infisical-sa
  namespace: {{ .Release.Namespace }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Namespace }}:vault-rb
subjects:
  - kind: ServiceAccount
    namespace: {{ .Release.Namespace }} 
    name: infisical-sa
roleRef:
  kind: ClusterRole
  name: {{ .Release.Namespace }}:vault-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Namespace }}:vault-ro-user-rb
subjects:
  - kind: ServiceAccount
    namespace: {{ .Release.Namespace }} 
    name: infisical-sa
roleRef:
  kind: ClusterRole
  name: tapr-images-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: Secret
metadata:
  name: infisical-postgres
  namespace: {{ .Release.Namespace }}
type: Opaque

{{ if $postgres_secret -}}
data:
  postgres-passwords: {{ index $postgres_secret "data" "postgres-passwords" }}
  redis-passwords: {{ index $postgres_secret "data" "redis-passwords" }}
{{ else -}}
data:
  postgres-passwords: {{ $postgres_password }}
  redis-passwords: {{ $redis_password }}
{{ end }}

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: infisical-postgres
  namespace: {{ .Release.Namespace }}
spec:
  app: infisical
  appNamespace: {{ .Release.Namespace }}
  middleware: postgres
  postgreSQL:
    user: infisical_os_framework
    password: 
      valueFrom:
        secretKeyRef:
          key: postgres-passwords
          name: infisical-postgres
    databases:
    - name: infisical

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: infisical-redis
  namespace: {{ .Release.Namespace }}
spec:
  app: infisical
  appNamespace: {{ .Release.Namespace }}
  middleware: redis
  redis:
    password:
      valueFrom:
        secretKeyRef:
          key: redis-passwords
          name: infisical-postgres
    namespace: infisical

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: infisical-deployment
  namespace: {{ .Release.Namespace }}
  labels:
    app: infisical
    applications.app.bytetrade.io/author: bytetrade.io

spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: infisical
  template:
    metadata:
      labels:
        app: infisical
        io.bytetrade.app: "true"
    spec:
      serviceAccountName: infisical-sa
      priorityClassName: "system-cluster-critical"
      initContainers:
      - name: init-container
        image: 'postgres:16.0-alpine3.18'
        command:
          - sh
          - '-c'
          - >-
            echo -e "Checking for the availability of PostgreSQL Server deployment"; until psql -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDB -c "SELECT 1"; do sleep 1; printf "-"; done; sleep 5; echo -e " >> PostgreSQL DB Server has started";
        env:
          - name: PGHOST
            value: citus-0.citus-headless.os-platform
          - name: PGPORT
            value: "5432"
          - name: PGUSER
            value: infisical_os_framework
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: infisical-postgres
                key: postgres-passwords
          - name: PGDB
            value: os_framework_infisical
      - name: "migration-init"
        image: "beclab/infisical:0.1.1"
        imagePullPolicy: IfNotPresent
        command: ["npm", "run", "migration:latest"]
        envFrom:
        - secretRef:
            name: infisical-backend
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: infisical-postgres
              key: postgres-passwords
        
        - name: POSTGRES_USER
          value: infisical_os_framework

        - name: POSTGRES_DB
          value: os_framework_infisical

        - name: DB_CONNECTION_URI
          value: "postgres://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@citus-0.citus-headless.os-platform/$(POSTGRES_DB)?sslmode=disable"
      containers:
      - name: infisical
        image: "beclab/infisical:0.1.1"
        imagePullPolicy: IfNotPresent
        readinessProbe:
          httpGet:
            path: /api/status
            port: 4000
          initialDelaySeconds: 10
          periodSeconds: 10
        ports:
        - containerPort: 4000
        envFrom:
        - secretRef:
            name: infisical-backend
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: infisical-postgres
              key: postgres-passwords
        
        - name: POSTGRES_USER
          value: infisical_os_framework

        - name: POSTGRES_DB
          value: os_framework_infisical

        
        - name: DB_CONNECTION_URI
          value: "postgres://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@citus-0.citus-headless.os-platform/$(POSTGRES_DB)?sslmode=disable"

        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: infisical-postgres
              key: redis-passwords
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-cluster-proxy.os-platform:6379/0"

      - name: infisical-proxy
        image: nginx:stable-alpine3.17-slim
        imagePullPolicy: IfNotPresent
        ports:
        - name: proxy
          containerPort: 8088
        volumeMounts:
        - name: nginx-config
          readOnly: true
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf

      - name: tapr-sidecar
        image: beclab/secret-vault:0.1.13
        imagePullPolicy: IfNotPresent
        ports:
        - name: proxy
          containerPort: 8080
        env:
        - name: INFISICAL_URL
          value: http://localhost:4000
        - name: PG_USER
          value: infisical_os_framework
        - name: PG_DB
          value: os_framework_infisical
        - name: PG_ADDR
          value: citus-0.citus-headless.os-platform
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: infisical-backend
              key: SECRET_KEY

      volumes:
      - name: nginx-config
        configMap:
          name: infisical-nginx-conf
          items:
          - key: nginx.conf
            path: nginx.conf
   

---
apiVersion: v1
kind: Service
metadata:
  name: infisical-service
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: infisical
  type: ClusterIP
  ports:
  - protocol: TCP
    name: infisical
    port: 80
    targetPort: 8088
  - protocol: TCP
    name: sidecar
    port: 8080
    targetPort: 8080




---
apiVersion: v1
kind: Secret
metadata:
  name: infisical-backend
  namespace: {{ .Release.Namespace }}
type: Opaque
{{ if $backend_secret -}}
data:
  ENCRYPTION_KEY: {{ $backend_secret.data.ENCRYPTION_KEY }}
  #INVITE_ONLY_SIGNUP: {{ $backend_secret.data.INVITE_ONLY_SIGNUP }}
  JWT_AUTH_SECRET: {{ $backend_secret.data.JWT_AUTH_SECRET }}
  JWT_MFA_SECRET: {{ $backend_secret.data.JWT_MFA_SECRET }}
  JWT_REFRESH_SECRET: {{ $backend_secret.data.JWT_REFRESH_SECRET }}
  JWT_SERVICE_SECRET: {{ $backend_secret.data.JWT_SERVICE_SECRET }}
  JWT_SIGNUP_SECRET: {{ $backend_secret.data.JWT_SIGNUP_SECRET }}
  SITE_URL: {{ $backend_secret.data.SITE_URL }}
  #SMTP_FROM_ADDRESS: {{ $backend_secret.data.SMTP_FROM_ADDRESS }}
  SMTP_FROM_NAME: {{ $backend_secret.data.SMTP_FROM_NAME }}
  #SMTP_HOST: {{ $backend_secret.data.SMTP_HOST }}
  #SMTP_PASSWORD: {{ $backend_secret.data.SMTP_PASSWORD }}
  SMTP_PORT: {{ $backend_secret.data.SMTP_PORT }}
  #SMTP_SECURE: {{ $backend_secret.data.SMTP_SECURE }}
  #SMTP_USERNAME: {{ $backend_secret.data.SMTP_USERNAME }}
  SECRET_KEY: {{ $backend_secret.data.SECRET_KEY }}
{{ else -}}
stringData:
  ENCRYPTION_KEY: "b318446cc6cd8ac7159ccc8245b32be5"
  #INVITE_ONLY_SIGNUP: ""
  JWT_AUTH_SECRET: {{ randAlphaNum 32 | lower }}
  JWT_MFA_SECRET: {{ randAlphaNum 32 | lower }}
  JWT_REFRESH_SECRET: {{ randAlphaNum 32 | lower }}
  JWT_SERVICE_SECRET: {{ randAlphaNum 32 | lower }}
  JWT_SIGNUP_SECRET: {{ randAlphaNum 32 | lower }}
  SITE_URL: "infisical.local"
  #SMTP_FROM_ADDRESS: ""
  SMTP_FROM_NAME: "Infisical"
  #SMTP_HOST: ""
  #SMTP_PASSWORD: ""
  SMTP_PORT: "587"
  #SMTP_SECURE: ""
  #SMTP_USERNAME: ""
  SECRET_KEY: {{ randAlphaNum 32 | lower }}

{{ end }}

---
apiVersion: v1
kind: Secret
metadata:
  name: infisical-frontend
  namespace: {{ .Release.Namespace }}
type: Opaque
stringData:
  SITE_URL: "infisical.local"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: infisical-nginx-conf
  namespace: {{ .Release.Namespace }}
data:
  nginx.conf: |
    worker_processes 2;
    events {}
    http {
        server {
            listen 8088;

            location /api {
                proxy_set_header X-Real-RIP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                proxy_set_header Host $http_host;
                proxy_set_header X-NginX-Proxy true;

                proxy_pass http://localhost:4000; # for backend
                proxy_redirect off;

                # proxy_cookie_path / "/; secure; HttpOnly; SameSite=strict";
                proxy_cookie_path / "/; HttpOnly; SameSite=strict";
            }

            location /tapr {
                proxy_set_header X-Real-RIP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                proxy_set_header Host $http_host;
                proxy_set_header X-NginX-Proxy true;

                proxy_pass http://localhost:8080; # for tapr
                proxy_redirect off;

                # proxy_cookie_path / "/; secure; HttpOnly; SameSite=strict";
                proxy_cookie_path / "/; HttpOnly; SameSite=strict";
            }

            location / {
                include /etc/nginx/mime.types;
            }
        }
    }


---
apiVersion: apr.bytetrade.io/v1alpha1
kind: SysEventRegistry
metadata:
  name: infisical-user-create-cb
  namespace: {{ .Release.Namespace }}
spec:
  type: subscriber
  event: user.create
  callback: http://infisical-service.{{ .Release.Namespace }}:8080/user/create

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: SysEventRegistry
metadata:
  name: infisical-user-delete-cb
  namespace: {{ .Release.Namespace }}
spec:
  type: subscriber
  event: user.delete
  callback: http://infisical-service.{{ .Release.Namespace }}:8080/user/delete
