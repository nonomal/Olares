

{{ $auth_rootpath := printf "%s%s" .Values.rootPath "/rootfs/auth" }}
{{- $auth_secret := (lookup "v1" "Secret" .Release.Namespace "authelia-secrets") -}}
{{- $jwt_secret := "" -}}
{{- $session_secret := "" -}}
{{- $hmac_secret := "" -}}
{{- $encryption_key := "" -}}
{{- $redis_password := "" -}}
{{- $pg_password := "" -}}
{{- $nats_password := "" -}}
{{ if $auth_secret -}}
{{- $jwt_secret = (index $auth_secret "data" "jwt_secret") -}}
{{- $session_secret = (index $auth_secret "data" "session_secret") -}}
{{- $hmac_secret = (index $auth_secret "data" "hmac_secret") -}}
{{- $encryption_key = (index $auth_secret "data" "encryption_key") -}}
{{- $redis_password = (index $auth_secret "data" "redis_password") -}}
{{- $pg_password = (index $auth_secret "data" "pg_password") -}}
{{- $nats_password = (index $auth_secret "data" "nats_password") -}}

{{ else -}}
{{ $jwt_secret = randAlphaNum 16 | b64enc }}
{{ $session_secret = randAlphaNum 16 | b64enc }}
{{ $hmac_secret = randAlphaNum 16 | b64enc }}
{{ $encryption_key = randAlphaNum 32 | b64enc }}
{{ $redis_password = randAlphaNum 16 | b64enc }}
{{ $pg_password = randAlphaNum 16 | b64enc }}
{{ $nats_password = randAlphaNum 16 | b64enc }}
{{- end -}}

---
apiVersion: v1
kind: Secret
metadata:
  name: authelia-secrets
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  jwt_secret: {{ $jwt_secret }}
  session_secret: {{ $session_secret }}
  hmac_secret: {{ $hmac_secret }}
  encryption_key: {{ $encryption_key }}
  redis_password: {{ $redis_password }}
  pg_password: {{ $pg_password }}
  nats_password: {{ $nats_password }}


---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: authelia-pg
  namespace: {{ .Release.Namespace }}
spec:
  app: authelia
  appNamespace: {{ .Release.Namespace }}
  middleware: postgres
  postgreSQL:
    user: authelia_os_framework
    password:
      valueFrom:
        secretKeyRef:
          key: pg_password
          name: authelia-secrets
    databases:
      - name: authelia

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: authelia-nats
  namespace: {{ .Release.Namespace }}
spec:
  app: authelia
  appNamespace: os
  middleware: nats
  nats:
    password:
      valueFrom:
        secretKeyRef:
          key: nats_password
          name: authelia-secrets
    subjects:
      - name: "notification.*"
        permission:
          pub: allow
          sub: allow
      - name: "users.*"
        permission:
          pub: allow
          sub: allow
      - name: users
        permission:
          pub: allow
          sub: allow
      - name: "groups.*"
        permission:
          pub: allow
          sub: allow
      - name: groups
        permission:
          pub: allow
          sub: allow
    user: os-authelia

---
apiVersion: v1
data:
  configuration.yaml: |
    jwt_secret: {{ $jwt_secret | b64dec }}
    default_redirection_url: /

    server:
      host: 0.0.0.0
      port: 9091
      buffers:
        read: 10240

    log:
      level: debug

    totp:
      issuer: terminus.os

    # duo_api:
    #  hostname: api-123456789.example.com
    #  integration_key: ABCDEF
    #  # This secret can also be set using the env variables AUTHELIA_DUO_API_SECRET_KEY_FILE
    #  secret_key: 1234567890abcdefghifjkl

    # authentication_backend:
    #   file:
    #     path: /config/users_database.yml
    authentication_backend:
      password_reset:
        disable: false
      refresh_interval: 5m
      lldap:
        implementation: custom
        url: ldap://lldap-service.os-platform:3890
        timeout: 5s
        start_tls: false
        base_dn: dc=example,dc=com
        additional_users_dn: ou=users
        users_filter: (&({username_attribute}={input})(objectClass=person))
        additional_groups_dn: ou=groups
        groups_filter: "(member={dn})"
        group_name_attribute: cn
        mail_attribute: mail
        display_name_attribute: displayName
        username_attribute: uid
        server: lldap-service.os-platform
        port: 17170
        user: cn=admin,dc=example,dc=com
        password: adminpassword

    access_control:
      config_type: terminus
      default_policy: deny
      rules:
        # Rules applied to everyone
        - domain: example.myterminus.com
          policy: one_factor
          # subject:
          # - ['group:platform-admin', 'group:workspace-manager']
        - domain: 'files.example.myterminus.com'
          policy: two_factor
          # subject:
          # - ['group:platform-admin', 'group:workspace-manager']

    session:
      # This secret can also be set using the env variables AUTHELIA_SESSION_SECRET_FILE
      secret: {{ $session_secret | b64dec }}
      name: authelia_session
      same_site: 'none'

      # expiration: 1209600  # probably nanosecond
      # inactivity: 1209600  # 5 minutes
      cookies:
        - domain: 'example.com'
          authelia_url: https://authelia-svc.example.com/

    regulation:
      max_retries: 3
      find_time: 120
      ban_time: 300

    storage:
      encryption_key: {{ $encryption_key | b64dec }}
      postgres:
        host: citus-headless.os-platform
        port: 5432
        database: os_framework_authelia
        schema: public
        username: authelia_os_framework
        password: {{ $pg_password | b64dec }}
        timeout: 5s
        
    notifier:
      disable_startup_check: false
      filesystem:
        filename: /app/notification.txt
    identity_providers:
      oidc:
        hmac_secret: {{ $hmac_secret | b64dec }}
        issuer_certificate_chain: |
          -----BEGIN CERTIFICATE-----
          MIIEuDCCAqACFBvQDeuNUHfGu79rOmqgk2wgkGu9MA0GCSqGSIb3DQEBCwUAMBkx
          FzAVBgNVBAMMDmV4YW1wbGUuY29tIENBMCAXDTI1MDcyNDEyMTA0NVoYDzIxMjUw
          NjMwMTIxMDQ1WjAWMRQwEgYDVQQDDAtleGFtcGxlLmNvbTCCAiIwDQYJKoZIhvcN
          AQEBBQADggIPADCCAgoCggIBALr5bLnqyWhlAsTQR6p6CTtqmPXCq5lMTNia+m7P
          GprNYjmmaOb5Zyqrqbb0oWzEnVlbfoo+45SeaxiK/y2+orQL+XElUIDWEQ5FxR7F
          +NxS5VILaRBEI2OOBUYTb67NDSp/gGJkPhI7quQrCRywosW06pLqrvWXC/dOoxiJ
          SFT+XRqpgAETZSORGRbYTobh+it66iADi+n2dZfbfP6Q/89Y7O3Hb8c95SVkfa9Y
          DrJgzRR1/icXd4d9/qmFn4EFP8G3/APgY6ZUQ2TY1xIlH/RBTjDVxZ10Vxo6h0E6
          tNV4C8HgAgnJFk7UEqPX1StP8LXXaCSoIWRJBF3RLchLgzbE7mBApJEbuf7Cch/f
          EqYPcXdbMj6odBkACHM0wGY6d26OnUypGmkGSym7EUUIEh6F/QhYQCM9ZVikcQcD
          RyQS1LVMU/a9iyGNLDiaWrtC9o5GWkLg6DC9lRwlm8MxCUOlTfvm97d5r8N8vbiI
          7H004pQ0E6ov6iN1Ogu/C1xD/rpFWY4tWy2pZkvEgEkxfJ0b0Dz8fExxvIypGC0y
          3l2r1OvlE31mDwxGC9N44w/6rInedXju3/6SfSUygJGKmQ6erLpFR4DFMSd9y1g4
          PzUbF4HyERL7jWtWaH1Pp0/scwZ0bEx+rG3UNHo76aHchrLRHqhb9XHkQ9hfLJNy
          AfMdAgMBAAEwDQYJKoZIhvcNAQELBQADggIBAETI8RoHDz4caw7srpMo449OJ5HK
          4UgZuvuiBU4xX8VmAOjDU0JyzJng4SSzyi+OeuHVsd1Y6H/QsDnjvPg2TZkQD1Q9
          HVefPz+tp1GzlvnGwP1IWTE5RLrmDMuZoYBDRZbYs5QeRPO+ryMItbP/CDMA488K
          vt6Wyid5g0dGgcgicZ6k0FGb7h0Ez2oht1FnuZJ6vb6BHZenyo+B1NQCm4URbukl
          xnk9akbOfEKsyHB2LkEFvTlnxKY4Mb1+IWkCslVVCY7IcD2rFDCkriiCvrhfGcOA
          AxgNzyWXnPtzQZf0bh/kKfDR/Ob6Q6nFauSeHfRsk/3z1MqCSM2KgvChRMy8z7eK
          mHT52sOHzi9kMo+5/4hCTvTYuDh4KvgkHBZOikpgc60A/In7D5zssXABLvQKNz9e
          5wX+62q7j9Mfa/KGkVo09f8B7fy4pAxYsAAnHMNLgx/4ek2e2fUsFdzS6fEzu3WM
          V9KlnQfDvOgAsAB09vFJK45G410wLGSzZIQ9rBR3+1CJVp3oLTd8ykVcON60fIk4
          KcgMcNHk/2JGjqxSHX+c3Fp1wyO1f83N5rr1cAJtf0Aigv1QLs6Y8ug09MJXPY9X
          ZDC76s1bS59eVHYJmIPV4w/8VmSDadAkuNpePxmDPJvmA0Mk3Ww6K9bcNCenLh00
          UVk3p0n08M71mFqs
          -----END CERTIFICATE-----
          -----BEGIN CERTIFICATE-----
          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
          Is6EW+RZhuHk
          -----END CERTIFICATE-----
        issuer_private_key: |
          -----BEGIN RSA PRIVATE KEY-----
          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
          -----END RSA PRIVATE KEY-----
        access_token_lifespan: 1h
        authorize_code_lifespan: 1m
        id_token_lifespan: 1h
        refresh_token_lifespan: 90m
        enable_client_debug_messages: false
        enforce_pkce: public_clients_only
        cors:
          endpoints:
            - authorization
            - token
            - revocation
            - introspection
        clients:
          - id: example
            description: example
            secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.
            sector_identifier: ''
            public: false
            authorization_policy: two_factor
            consent_mode: implicit
            pre_configured_consent_duration: 1w
            audience: []
            scopes:
              - openid
              - groups
              - email
              - profile
            redirect_uris:
              - https://www.example.com/auth/auth/openid_connect/callback
            grant_types:
              - refresh_token
              - authorization_code
            response_types:
              - code
            response_modes:
              - form_post
              - query
              - fragment
            userinfo_signing_algorithm: none
  # users_database.yaml: |
  #   users:
  #     authelia:
  #       disabled: false
  #       displayname: "Authelia User"
  #       # Password is authelia
  #       password: "$6$rounds=50000$BpLnfgDsc2WD8F2q$Zis.ixdg9s/UOJYrs56b5QEZFiZECu0qZVNsIYxBaNJ7ucIL.nlxVCT5tqh8KHG8X4tlwCFm5r6NTOZZ5qRFN/"  # yamllint disable-line rule:line-length
  #       email: authelia@authelia.com
  #       groups:
  #         - admins
  #         - dev

kind: ConfigMap
metadata:
  name: authelia-configs
  namespace: {{ .Release.Namespace }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authelia-backend
  namespace: {{ .Release.Namespace }}
  labels:
    app: authelia-backend
    applications.app.bytetrade.io/author: bytetrade.io
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authelia-backend
  template:
    metadata:
      labels:
        app: authelia-backend
    spec:
      serviceAccountName: os-internal
      serviceAccount: os-internal
      priorityClassName: "system-cluster-critical"
      initContainers:
      - name: init-container
        image: 'postgres:16.0-alpine3.18'
        command:
          - sh
          - '-c'
          - >-
            echo -e "Checking for the availability of PostgreSQL Server deployment";
            until psql -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDB -c "SELECT 1";
            do sleep 1; printf "-"; done; sleep 15;
            echo -e " >> $PGDB exists";
        env:
          - name: PGHOST
            value: citus-headless.os-platform
          - name: PGPORT
            value: "5432"
          - name: PGUSER
            value: authelia_os_framework
          - name: PGPASSWORD
            value: {{ $pg_password | b64dec }}
          - name: PGDB
            value: os_framework_authelia
      - name: setsysctl
        image: 'busybox:1.28'
        command:
          - sh
          - '-c'
          - |
            sysctl -w net.core.somaxconn=65535
            sysctl -w net.ipv4.ip_local_port_range="1024 65535"
            sysctl -w net.ipv4.tcp_tw_reuse=1
            sysctl -w fs.file-max=1048576
        securityContext:
          privileged: true
      containers:      
      - name: authelia
        image: beclab/auth:0.2.27
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9091
        env:
        - name: TZ
          value: UTC
        - name: APP_RANDOM_KEY
          valueFrom:
            secretKeyRef:
              name: app-key
              key: random-key
        - name: NATS_HOST
          value: nats.os-platform
        - name: NATS_PORT
          value: "4222"
        - name: NATS_USERNAME
          value: os-authelia
        - name: NATS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: nats_password
              name: authelia-secrets
        - name: NATS_SUBJECT
          value: "os.notification"
        - name: NATS_SUBJECT_FOR_USERS
          value: "os.users"
        - name: NATS_SUBJECT_FOR_GROUPS
          value: "os.groups"

        volumeMounts:
        - name: config
          mountPath: /app/configuration.yml
          subPath: configuration.yaml
        - name: data
          mountPath: /config

      volumes:
      - name: config
        configMap:
          name: authelia-configs
          defaultMode: 438
          items:
          - key: configuration.yaml
            path: configuration.yaml
      - name: data
        hostPath:
          type: DirectoryOrCreate
          path: '{{ $auth_rootpath }}'

---
apiVersion: v1
kind: Service
metadata:
  name: authelia-backend
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: authelia-backend
  type: ClusterIP
  ports:
    - protocol: TCP
      name: authelia
      port: 9091
      targetPort: 9091
