

{{ $backupVersion := "0.3.46" }}
{{ $backup_server_rootpath := printf "%s%s" .Values.rootPath "/rootfs/backup-server" }}

{{- $backup_nats_secret := (lookup "v1" "Secret" .Release.Namespace "backup-nats-secret") -}}
{{- $nats_password := "" -}}
{{ if $backup_nats_secret -}}
{{ $nats_password = (index $backup_nats_secret "data" "nats_password") }}
{{ else -}}
{{ $nats_password = randAlphaNum 16 | b64enc }}
{{- end -}}

---
apiVersion: v1
kind: Secret
metadata:
  name: backup-nats-secret
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  nats_password: {{ $nats_password }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backup
  namespace: {{ .Release.Namespace }}
  labels:
    component: velero
    deploy: backup
    applications.app.bytetrade.io/author: bytetrade.io
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      tier: backup
  template:
    metadata:
      labels:
        tier: backup
    spec:
      dnsPolicy: ClusterFirstWithHostNet
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: Exists
      volumes:
      - name: dbdata
        hostPath:
          type: DirectoryOrCreate
          path: '{{ $backup_server_rootpath }}/data'
      - name: rootfs
        hostPath:
          path: '{{ .Values.rootPath }}/rootfs'
      - name: shares
        hostPath:
          path: '{{ .Values.rootPath }}/share'
      serviceAccountName: os-internal
      initContainers:
        - args:
          - -it
          - nats.os-platform:4222
          image: owncloudci/wait-for:latest
          imagePullPolicy: IfNotPresent
          name: check-nats
      containers:
      - name: api
        image: beclab/backup-server:v{{ $backupVersion }}
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: true
          privileged: true
          runAsUser: 0
        command:
        - /backup-server
        - apiserver
        resources:
          requests:
            cpu: 20m
            memory: 50Mi
          limits:
            cpu: 500m
            memory: 512Mi
        env:
        {{- range $key, $val := .Values.terminusGlobalEnvs }}
        - name: {{ $key }}
          value: {{ $val | quote }}
        {{- end }}
        - name: TERMINUS_IS_CLOUD_VERSION
          value: {{ default "false" .Values.backup.is_cloud_version | quote }}
        - name: ENABLE_MIDDLEWARE_BACKUP
          value: "true"
        - name: APP_RANDOM_KEY
          valueFrom:
            secretKeyRef:
              name: app-key
              key: random-key
        - name: NATS_HOST
          value: nats.os-platform
        - name: NATS_PORT
          value: "4222"
        - name: NATS_USERNAME
          value: os-backup
        - name: NATS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: nats_password
              name: backup-nats-secret
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        ports:
        - containerPort: 8082
          protocol: TCP
        volumeMounts:
        - mountPath: /rootfs
          name: rootfs
        - mountPath: /shares
          mountPropagation: Bidirectional
          name: shares
      - name: controller
        image: beclab/backup-server:v{{ $backupVersion }}
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: true
          privileged: true
          runAsUser: 0
        command:
        - /backup-server
        - controller
        resources:
          requests:
            cpu: 20m
            memory: 50Mi
          limits:
            cpu: 2
            memory: 1500Mi
        env:
        {{- range $key, $val := .Values.terminusGlobalEnvs }}
        - name: {{ $key }}
          value: {{ $val | quote }}
        {{- end }}
        - name: APP_RANDOM_KEY
          valueFrom:
            secretKeyRef:
              name: app-key
              key: random-key
        - name: NATS_HOST
          value: nats.os-platform
        - name: NATS_PORT
          value: "4222"
        - name: NATS_USERNAME
          value: os-backup
        - name: NATS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: nats_password
              name: backup-nats-secret
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8081
          protocol: TCP
        volumeMounts:
        - mountPath: /rootfs
          name: rootfs
        - mountPath: /shares
          mountPropagation: Bidirectional
          name: shares

---
apiVersion: v1
kind: Service
metadata:
  name: backup-server
  namespace: {{ .Release.Namespace }}
spec:
  ports:
  - port: 8082
    targetPort: 8082
    protocol: TCP
  selector:
    tier: backup

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: backup-nats
  namespace: {{ .Release.Namespace }}
spec:
  app: backup
  appNamespace: os
  middleware: nats
  nats:
    password:
      valueFrom:
        secretKeyRef:
          key: nats_password
          name: backup-nats-secret
    subjects:
      - name: "backup.*"
        permission:
          pub: allow
          sub: allow
    user: os-backup