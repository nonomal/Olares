

name: Daily Build Release

on:
  schedule:
    # This is a UTC time
    - cron: "30 18 * * *"
  workflow_dispatch:

jobs:

  daily-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.generate.outputs.version }}
    steps:
      - id: generate
        run: |
          v=1.12.1-$(date +"%Y%m%d")
          echo "version=$v" >> "$GITHUB_OUTPUT"

  release-id:
    runs-on: ubuntu-latest
    outputs:
      id: ${{ steps.generate.outputs.id }}
    steps:
      - name: 'Checkout source code'
        uses: actions/checkout@v3
      - id: generate
        run: |
          hash=$(git rev-parse --short=7 HEAD)
          echo "id=$hash" >> "$GITHUB_OUTPUT"

  release-cli:
    needs: [daily-version, release-id]
    uses: ./.github/workflows/release-cli.yaml
    secrets: inherit
    with:
      version: ${{ needs.daily-version.outputs.version }}
      release-id: ${{ needs.release-id.outputs.id }}

  release-daemon:
    needs: [daily-version, release-id]
    uses: ./.github/workflows/release-daemon.yaml
    secrets: inherit
    with:
      version: ${{ needs.daily-version.outputs.version }}
      release-id: ${{ needs.release-id.outputs.id }}

  push-images:
    runs-on: ubuntu-22.04

    steps:
      - name: 'Checkout source code'
        uses: actions/checkout@v3

      - env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
        run: |
          bash build/image-manifest.sh && bash build/upload-images.sh .manifest/images.mf

  push-images-arm64:
    runs-on: [self-hosted, linux, ARM64]

    steps:
      - name: 'Checkout source code'
        uses: actions/checkout@v3

      - env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
        run: |
          export PATH=$PATH:/usr/local/bin:/home/ubuntu/.local/bin
          bash build/image-manifest.sh && bash build/upload-images.sh .manifest/images.mf linux/arm64

  push-deps:
    needs: [daily-version, release-id, release-daemon]
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout source code"
        uses: actions/checkout@v3

      # test
      - env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
          VERSION: ${{ needs.daily-version.outputs.version }}
          RELEASE_ID: ${{ needs.release-id.outputs.id }}
          REPO_PATH: '${{ secrets.REPO_PATH }}'
        run: |
          bash build/deps-manifest.sh && bash build/upload-deps.sh

  push-deps-arm64:
    needs: [daily-version, release-id, release-daemon]
    runs-on: [self-hosted, linux, ARM64]

    steps:
      - name: "Checkout source code"
        uses: actions/checkout@v3

      # test
      - env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
          VERSION: ${{ needs.daily-version.outputs.version }}
          RELEASE_ID: ${{ needs.release-id.outputs.id }}
          REPO_PATH: '${{ secrets.REPO_PATH }}'
        run: |
          export PATH=$PATH:/usr/local/bin:/home/ubuntu/.local/bin
          bash build/deps-manifest.sh linux/arm64 && bash build/upload-deps.sh linux/arm64


  upload-package:
    needs: [daily-version, release-id, push-images, push-images-arm64, push-deps, push-deps-arm64]
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout source code'
        uses: actions/checkout@v3

      - name: Package installer
        run: |
          bash build/build.sh ${{ needs.daily-version.outputs.version }} ${{ needs.release-id.outputs.id }}

      - name: Upload to S3
        id: upload
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
        run: |
          md5sum install-wizard-v${{ needs.daily-version.outputs.version }}.tar.gz > install-wizard-v${{ needs.daily-version.outputs.version }}.md5sum.txt && \
          aws s3 cp install-wizard-v${{ needs.daily-version.outputs.version }}.md5sum.txt s3://terminus-os-install${{ secrets.REPO_PATH }}install-wizard-v${{ needs.daily-version.outputs.version }}.md5sum.txt --acl=public-read && \
          aws s3 cp install-wizard-v${{ needs.daily-version.outputs.version }}.tar.gz s3://terminus-os-install${{ secrets.REPO_PATH }}install-wizard-v${{ needs.daily-version.outputs.version }}.tar.gz --acl=public-read && \

          aws s3 cp install-wizard-v${{ needs.daily-version.outputs.version }}.md5sum.txt s3://terminus-os-install${{ secrets.REPO_PATH }}install-wizard-v${{ needs.daily-version.outputs.version }}.${{ needs.release-id.outputs.id }}.md5sum.txt --acl=public-read && \
          aws s3 cp install-wizard-v${{ needs.daily-version.outputs.version }}.tar.gz s3://terminus-os-install${{ secrets.REPO_PATH }}install-wizard-v${{ needs.daily-version.outputs.version }}.${{ needs.release-id.outputs.id }}.tar.gz --acl=public-read


  release:
    needs: [daily-version, upload-package, release-cli, release-id]
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout source code'
        uses: actions/checkout@v3

      - name: Package installer
        run: |
          bash build/build.sh ${{ needs.daily-version.outputs.version }} ${{ needs.release-id.outputs.id }}

      - name: 'Archives'
        run: |
          cp .dist/install-wizard/install.sh build/base-package
          cp build/base-package/install.sh build/base-package/publicInstaller.sh
          cp .dist/install-wizard/install.ps1 build/base-package
          cp .dist/install-wizard/joincluster.sh build/base-package

      - name: Release public files
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ needs.daily-version.outputs.version }} Release
          tag_name: ${{ needs.daily-version.outputs.version }}
          files: |
            install-wizard-v${{ needs.daily-version.outputs.version }}.tar.gz
            build/base-package/publicInstaller.sh
            build/base-package/install.sh
            build/base-package/install.ps1
            build/base-package/joincluster.sh
            build/base-package/publicAddnode.sh
            build/base-package/version.hint
            build/base-package/publicRestoreInstaller.sh
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
